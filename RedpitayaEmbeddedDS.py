#    "$Name:  $";
#    "$Header:  $";
# =============================================================================
#
# file :        RedpitayaEmbeddedDS.py
#
# description : Python source for the RedpitayaEmbeddedDS and its commands.
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                RedpitayaEmbeddedDS are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
# =============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
# =============================================================================
#


import PyTango
import sys
import redpitaya_emb_control_v094 as rpc
# import redpitaya_emb_control as rpc
import threading
import time
import numpy as np
from socket import gethostname
import queue


class DeviceCommand:
    def __init__(self, command, data=None):
        self.command = command
        self.data = data


# ==================================================================
#   RedpitayaEmbeddedDS Class Description:
#
#         Control of a RedPitaya oscilloscope.
#
# ==================================================================
#     Device States Description:
#
#   DevState.ON :    Oscilloscope running, aquiring traces
#   DevState.INIT :  Oscilloscope initializing
# ==================================================================


class RedpitayaEmbeddedDS(PyTango.Device_4Impl):

    # --------- Add you global variables here --------------------------

    # ------------------------------------------------------------------
    #    Device constructor
    # ------------------------------------------------------------------
    def __init__(self, cl, name):
        self.oscilloscope = rpc.RedpitayaControl()
        self.measurement_strings = ['max(w1)', 'm1_1', 'w1.sum()', 'w2.sum()']
        self.measurement_data = np.array([0.0, 0.0, 0.0, 0.0])
        self.marker_x_data = [0.0, 0.0]
        self.marker_y_data = [0.0, 0.0]
        self.redpitaya_data = rpc.RedPitayaData()
        self.redpitaya_data.triggerCounter1 = -1
        self.state_thread = None
        self.command_queue = None
        self.statehandler_dict = None
        self.stop_state_thread_flag = False
        self.oscilloscope_data = None
        self.sleep_time = 0.050
        self.watchdog_timer = None

        PyTango.Device_4Impl.__init__(self, cl, name)
        RedpitayaEmbeddedDS.init_device(self)

    # ------------------------------------------------------------------
    #    Device destructor
    # ------------------------------------------------------------------
    def delete_device(self):
        self.info_stream(''.join(("[Device delete_device method] for device", self.get_name())))
        self.stop_state_thread()
        self.oscilloscope.close()

    # ------------------------------------------------------------------
    #    Device initialization
    # ------------------------------------------------------------------
    def init_device(self):
        self.info_stream(''.join(("In ", self.get_name(), "::init_device()")))
        self.set_state(PyTango.DevState.UNKNOWN)
        self.get_device_properties(self.get_device_class())

        try:
            self.stop_state_thread()
            self.oscilloscope.close()
        except Exception:
            pass

        try:
            self.debug_stream("In init_device: InputRange property: {0}".format(self.InputRange))
            if self.InputRange == "LV":
                self.debug_stream("In init_device: Low voltage input range")
                inp_range = 1.0
            else:
                self.debug_stream("In init_device: High voltage input range")
                inp_range = 20.0
            self.oscilloscope = rpc.RedpitayaControl(inp_range, self.FPGABitFile)
            self.debug_stream("In init_device: Oscilloscope object created")
            self.measurement_strings
        except:
            self.measurement_strings = ['max(w1)', 'max(w2)', 'w1.sum()', 'w2.sum()']
            self.measurement_data = np.array([0.0, 0.0, 0.0, 0.0])
            # This RedPitayaData is just to hold read waveforms, timevector,
            # and triggerWait flag. It could in principle be removed and
            # just use the oscilloscope.redPitayaData instead.
            self.redpitaya_data = rpc.RedPitayaData()
        self.state_thread = threading.Thread()
        threading.Thread.__init__(self.state_thread, target=self.statehandler_dispatcher)

        self.command_queue = queue.Queue(100)

        self.statehandler_dict = {PyTango.DevState.ON: self.on_handler,
                                  PyTango.DevState.STANDBY: self.standby_handler,
                                  PyTango.DevState.ALARM: self.on_handler,
                                  PyTango.DevState.FAULT: self.fault_handler,
                                  PyTango.DevState.INIT: self.init_handler,
                                  PyTango.DevState.UNKNOWN: self.unknown_handler,
                                  PyTango.DevState.OFF: self.off_handler}

        self.stop_state_thread_flag = False

        self.state_thread.start()

    # ------------------------------------------------------------------
    #    Always excuted hook method
    # ------------------------------------------------------------------
    def always_executed_hook(self):
        pass
        # self.info_stream(''.join(("In ", self.get_name(), "::always_excuted_hook()")))

    def statehandler_dispatcher(self):
        prev_state = self.get_state()
        while self.stop_state_thread_flag is False:
            try:
                state = self.get_state()
                self.statehandler_dict[state](prev_state)
                prev_state = state
            except KeyError:
                self.statehandler_dict[PyTango.DevState.UNKNOWN](prev_state)
                prev_state = state

    def unknown_handler(self, prev_state):
        self.info_stream('Entering unknown_handler')
        connection_timeout = 1.0

        self.stop_watchdog()

        self.oscilloscope_data = None
        try:
            self.oscilloscope.connect()
            self.set_state(PyTango.DevState.INIT)
            self.info_stream('... connected')
        except Exception as expt:
            self.error_stream(''.join(('Could not create oscilloscope object.', str(expt))))
            self.set_state(PyTango.DevState.UNKNOWN)
            self.set_status(''.join(('Could not create oscilloscope object.', str(expt))))

        while self.get_state() == PyTango.DevState.UNKNOWN:
            self.info_stream('Trying to connect...')
            try:
                self.oscilloscope.close()
            except:
                pass
            try:
                self.oscilloscope.connect()
                self.set_state(PyTango.DevState.INIT)
                self.info_stream('... connected')
            except Exception as expt:
                self.error_stream(''.join(('Could not create oscilloscope object.', str(expt))))
                self.set_state(PyTango.DevState.UNKNOWN)
                self.set_status(''.join(('Could not create oscilloscope object.', str(expt))))

            time.sleep(connection_timeout)

    def init_handler(self, prev_state):
        self.info_stream('Entering initHandler')
        self.set_state(PyTango.DevState.INIT)
        s_status = 'Starting initialization\n'
        self.set_status(s_status)
        self.info_stream(s_status)
        init_timeout = 1.0  # Retry time interval

        exit_init_flag = False  # Flag to see if we can leave the loop

        while exit_init_flag is False:
            exit_init_flag = True  # Preset in case nothing goes wrong

            try:
                s = 'Initializing scope settings\n'
                s_status = ''.join((s_status, s))
                self.set_status(s_status)
                self.info_stream(s)
                self.oscilloscope.init_scope()
            except Exception as expt:
                err_msg = ''.join(('In initHandler: could not initialize scope settings:', str(expt)))
                self.error_stream(err_msg)
                exit_init_flag = False
                time.sleep(init_timeout)
                continue

            s = 'Setting trigger level\n'
            s_status = ''.join((s_status, s))
            self.set_status(s_status)
            self.info_stream(s)
            attrs = self.get_device_attr()

            attr_nbr = attrs.get_attr_nb()
            self.info_stream(''.join(('Found ', str(attr_nbr), ' attributes.')))
            attr_list = attrs.get_attribute_list()
            self.info_stream(str(type(attr_list)))
            for k in range(attr_nbr):
                attr = attrs.get_attr_by_ind(k)
                self.info_stream(attr.get_name())
                self.info_stream(''.join(('Associated write: ', attr.get_assoc_name())))
                self.info_stream(''.join(('Associated index: ', str(attr.get_assoc_ind()))))
                if attr.get_assoc_name() != 'None':
                    w_attr = attrs.get_w_attr_by_ind(attr.get_assoc_ind())
                    self.info_stream(''.join((w_attr.get_name())))

            self.set_status('Connected to oscilloscope, not acquiring')
            self.info_stream('Initialization finished.')
            self.set_state(PyTango.DevState.ON)

            # Start watchdog
            self.reset_watchdog()

            self.info_stream("Found {0} items in queue".format(self.command_queue.qsize()))
            while self.command_queue.empty() is False:
                self.check_commands()

    def standby_handler(self, prev_state):
        self.info_stream('Entering standbyHandler')
        self.set_status('Connected to oscilloscope, not acquiring spectra')
        keep_alive_interval = 0.25
        t0 = time.clock()
        self.oscilloscope.stop()

        while self.stop_state_thread_flag is False:
            if self.get_state() != PyTango.DevState.STANDBY:
                break
            # Check if any new commands arrived:
            self.check_commands()

            # Try contacting the redpitaya at regular intervals to make sure it is alive
            t = time.clock()
            if t - t0 > keep_alive_interval:
                t0 = t
                try:
                    self.oscilloscope.set_trigger_level(self.oscilloscope.redpitaya_data.triggerLevel)
                    self.reset_watchdog()
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('standbyHandler error: ', str(expt))))

            if self.get_state() != PyTango.DevState.STANDBY:
                break

            # 50 ms sleep to stay responsive and still not bog down the computer
            time.sleep(0.05)

    def on_handler(self, prev_state):
        self.info_stream('Entering onHandler')
        self.set_status('Connected to oscilloscope, acquiring waveforms')
        handled_states = [PyTango.DevState.ON, PyTango.DevState.ALARM]
        self.open_oscilloscope()

        self.sleep_time = 0.005
        s = ''.join(('Sleeptime: ', str(self.sleep_time)))
        self.info_stream(s)
        next_update_time = time.time()
        self.oscilloscope.start()
        while self.stop_state_thread_flag is False:
            if self.get_state() not in handled_states:
                self.info_stream(''.join(('State ', str(self.get_state()), ' not in handled states')))
                break

            # Check if any new commands arrived:
            self.debug_stream('Entering check commands...')
            self.check_commands()
            self.debug_stream('...check commands done')

            # Check if we should break this loop and go to a new state handler:
            if self.get_state() not in handled_states:
                self.info_stream(''.join(('2.. State ', str(self.get_state()), ' not in handled states')))
                break

            try:
                ts = time.time()
                if ts > next_update_time:
                    self.debug_stream('Acquiring waveform...')
                    # Check if scope is alive:
                    try:
                        run_stat = self.oscilloscope.get_running_status()
                        if run_stat is False:
                            self.set_state(PyTango.DevState.STANDBY)
                        self.reset_watchdog()
                    except Exception as expt:
                        self.error_stream(str(expt))
                        self.set_state(PyTango.DevState.FAULT)
                    self.debug_stream('Acquiring waveform done.')
                    self.redpitaya_data.triggerWait = self.oscilloscope.get_trigger_wait_status()
                    self.debug_stream("Trigger wait: {0}".format(self.redpitaya_data.triggerWait))
                    self.debug_stream("Trigger counter: {0}, saved counter {1}".format(
                        self.oscilloscope.get_trigger_counter(1), self.redpitaya_data.triggerCounter1))
                    # Check if we got a fresh trig event:
                    if self.redpitaya_data.triggerCounter1 != self.oscilloscope.get_trigger_counter(1):
                        # Yes, so flag it as not waiting for trigger and update timestamp
                        # Retrieve waveforms:
                        self.debug_stream('Getting waveforms.')
                        w1 = self.oscilloscope.get_waveform(1)
                        self.redpitaya_data.waveform1 = w1
                        w2 = self.oscilloscope.get_waveform(2)
                        self.redpitaya_data.waveform2 = w2
                        t = self.oscilloscope.redpitaya_data.timevector
                        self.redpitaya_data.timevector = t
                        self.redpitaya_data.triggerCounter1 = self.oscilloscope.get_trigger_counter(1)
                        self.redpitaya_data.triggerCounter2 = self.oscilloscope.get_trigger_counter(2)
                        self.debug_stream('Waveforms gotten.')
                        dt = 1/self.redpitaya_data.sampleRate
                        m_i1 = min(self.redpitaya_data.recordLength,
                                   max(0, np.int((self.marker_x_data[0] - t[0]) / dt)))
                        m_i2 = min(self.redpitaya_data.recordLength,
                                   max(0, np.int((self.marker_x_data[1] - t[0]) / dt)))
                        m1 = w1[m_i1]
                        m2 = w2[m_i2]
                        m1_1 = w1[m_i1]
                        m1_2 = w2[m_i1]
                        m2_1 = w1[m_i2]
                        m2_2 = w2[m_i2]
                        # Calculate measurements
                        for i, s in enumerate(self.measurement_strings):
                            try:
                                self.measurement_data[i] = eval(s)
                            except Exception:
                                self.measurement_data[i] = None
                        self.debug_stream('Measurements calculated.')
                        # Update update time:
                        next_update_time = ts + 0.05

                time.sleep(self.sleep_time)

            except Exception as expt:
                self.set_state(PyTango.DevState.FAULT)
                self.set_status('Error reading hardware.')
                self.error_stream(''.join(('onHandler error: ', str(expt))))

    def alarm_handler(self, prev_state):
        pass

    def fault_handler(self, prev_state):
        response_attempts = 0
        max_attempts = 5
        response_timeout = 0.5
        self.info_stream('Entering faultHandler.')
        self.set_status('Fault condition detected')

        while self.get_state() == PyTango.DevState.FAULT:
            try:
                self.oscilloscope.close()
                time.sleep(1.5)
                self.oscilloscope.connect()

                self.set_state(prev_state)
                self.info_stream('Fault condition cleared.')
                break
            except Exception as expt:
                self.error_stream(''.join(('In faultHandler: Testing controller response. Returned ', str(expt))))
                response_attempts += 1
            if response_attempts >= max_attempts:
                self.set_state(PyTango.DevState.UNKNOWN)
                self.set_status('Could not connect to controller')
                self.error_stream('Giving up fault handling. Going to UNKNOWN state.')
                break
            time.sleep(response_timeout)

    def off_handler(self, prev_state):
        self.info_stream('Entering offHandler')
        try:
            self.oscilloscope.close()
        except Exception as expt:
            self.error_stream(''.join(('Could not disconnect from oscilloscope, ', str(expt))))

        self.set_status('Disconnected from oscilloscope')
        while self.stop_state_thread_flag is False:
            if self.get_state() != PyTango.DevState.OFF:
                break
            # Check if any new commands arrived:
            self.check_commands()
            if self.get_state() != PyTango.DevState.OFF:
                break

            time.sleep(0.1)

    def check_commands(self):
        try:
            cmd = self.command_queue.get(block=False)
            self.info_stream(str(cmd.command))
            if cmd.command == 'writeTriggerSource':
                try:
                    self.oscilloscope.set_trigger_source(cmd.data)
                except ValueError as expt:
                    self.error_stream(''.join(('ValueError: ', str(expt))))
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(expt))))
            elif cmd.command == 'writeTriggerMode':
                try:
                    self.oscilloscope.set_triggermode(cmd.data)
                except ValueError as expt:
                    self.error_stream(''.join(('ValueError: ', str(expt))))
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(expt))))
            elif cmd.command == 'writeTriggerEdge':
                try:
                    self.oscilloscope.set_triggeredge(cmd.data)
                except ValueError as expt:
                    self.error_stream(''.join(('ValueError: ', str(expt))))
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(expt))))
            elif cmd.command == 'writeRecordLength':
                try:
                    self.oscilloscope.set_record_length(cmd.data)
                    self.redpitaya_data.recordLength = cmd.data
                except ValueError as expt:
                    self.error_stream(''.join(('ValueError: ', str(expt))))
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(expt))))
            elif cmd.command == 'writeDecimationFactor':
                try:
                    self.oscilloscope.set_decimation_factor(cmd.data)
                except ValueError as expt:
                    self.error_stream(''.join(('ValueError: ', str(expt))))
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(expt))))
            elif cmd.command == 'writeSampleRate':
                dec_array = np.array([1, 8, 64, 1024, 8192, 16384])
                sample_rate_array = 125e6 / dec_array
                sample_index = max(0, np.argmin(sample_rate_array > cmd.data) - 1)
                self.redpitaya_data.sampleRate = sample_rate_array[sample_index]
                self.info_stream('writeSampleRate:')
                self.info_stream(''.join(('sampleIndex: ', str(sample_index))))
                try:
                    self.oscilloscope.set_decimation_factor(sample_index)
                except ValueError as expt:
                    self.error_stream(''.join(('ValueError: ', str(expt))))
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(expt))))
            elif cmd.command == 'writeTriggerLevel':
                try:
                    self.oscilloscope.set_trigger_level(cmd.data)
                except ValueError as expt:
                    self.error_stream(''.join(('ValueError: ', str(expt))))
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(expt))))
            elif cmd.command == 'writeTriggerDelay':
                try:
                    self.oscilloscope.set_triggerdelay_time(cmd.data)
                except ValueError as expt:
                    self.error_stream(''.join(('ValueError: ', str(expt))))
                except Exception as expt:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(expt))))
            elif cmd.command == 'writeMeasurementString1':
                self.measurement_strings[0] = cmd.data
            elif cmd.command == 'writeMeasurementString2':
                self.measurement_strings[1] = cmd.data
            elif cmd.command == 'writeMeasurementString3':
                self.measurement_strings[2] = cmd.data
            elif cmd.command == 'writeMeasurementString4':
                self.measurement_strings[3] = cmd.data

            elif cmd.command == 'start':
                self.oscilloscope.start()
                self.set_state(PyTango.DevState.ON)
#                 self.startHardwareThread()

            elif cmd.command == 'stop':
                self.set_state(PyTango.DevState.STANDBY)

            elif cmd.command == 'off':
                self.set_state(PyTango.DevState.OFF)
            elif cmd.command == 'test':
                attrs = self.get_device_attr()
                apa = attrs.get_w_attr_by_name('triggerlevel')
                print("test triggermode: {0}".format(repr(apa.get_write_value())))
                print(str(type(apa.get_write_value())))
                print(str(apa.get_write_value_length()))

        except queue.Empty:
            pass

    def open_oscilloscope(self):
        # If the device was closed, we open it again
        if self.oscilloscope.connected is False:
            self.info_stream('In openOscilloscope: scope was disconnected, attempting connect')
            try:
                self.oscilloscope.connect()
            except Exception as expt:
                self.error_stream(''.join(('Could not open device: ', str(expt))))
                self.set_state(PyTango.DevState.FAULT)
                self.set_status("Could not open device")

    def reset_watchdog(self):
        try:
            self.watchdog_timer.cancel()
        except:
            pass
        self.watchdog_timer = threading.Timer(self.WatchdogTimeout, self.watchdog_handler)
        self.watchdog_timer.start()

    def stop_watchdog(self):
        try:
            self.watchdog_timer.cancel()
        except:
            pass

    def watchdog_handler(self):
        self.info_stream('Watchdog timed out. ')
        # self.init_device()

    def stop_state_thread(self):
        self.info_stream('Stopping thread...')
        self.stop_state_thread_flag = True
        if self.state_thread.isAlive() is True:
            self.info_stream('It was alive.')
            self.state_thread.join(3)
        self.info_stream('Now stopped.')
        self.stop_state_thread_flag = False
        self.set_state(PyTango.DevState.UNKNOWN)

    # ==================================================================
    #
    #    RedpitayaEmbeddedDS read/write attribute methods
    #
    # ==================================================================
    # ------------------------------------------------------------------
    #    Read Attribute Hardware
    # ------------------------------------------------------------------
    def read_attr_hardware(self, data):
        pass
        # self.info_stream(''.join(("In ", self.get_name(), "::read_attr_hardware()")))

    # ------------------------------------------------------------------
    #    Read TriggerSource attribute
    # ------------------------------------------------------------------
    def read_TriggerSource(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerSource()")))

        #    Add your own code here

        attr_triggersource_read = self.oscilloscope.get_triggersource()
        attr.set_value(attr_triggersource_read)

    # ------------------------------------------------------------------
    #    Write TriggerSource attribute
    # ------------------------------------------------------------------
    def write_TriggerSource(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerSource()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeTriggerSource', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

    # ---- TriggerSource attribute State Machine -----------------
    def is_TriggerSource_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

    # ------------------------------------------------------------------
    #    Read TriggerMode attribute
    # ------------------------------------------------------------------
    def read_TriggerMode(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerMode()")))

        #    Add your own code here

        attr_TriggerMode_read = self.oscilloscope.get_triggermode()
        attr.set_value(attr_TriggerMode_read)

    # ------------------------------------------------------------------
    #    Write TriggerMode attribute
    # ------------------------------------------------------------------
    def write_TriggerMode(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerMode()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeTriggerMode', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

    # ---- TriggerMode attribute State Machine -----------------
    def is_TriggerMode_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

    # ------------------------------------------------------------------
    #    Read TriggerEdge attribute
    # ------------------------------------------------------------------
    def read_TriggerEdge(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerEdge()")))

        #    Add your own code here

        attr_TriggerEdge_read = self.oscilloscope.get_triggeredge()
        attr.set_value(attr_TriggerEdge_read)


# ------------------------------------------------------------------
#    Write TriggerEdge attribute
# ------------------------------------------------------------------
    def write_TriggerEdge(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerEdge()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeTriggerEdge', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- TriggerEdge attribute State Machine -----------------
    def is_TriggerEdge_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


# ------------------------------------------------------------------
#    Read TriggerLevel attribute
# ------------------------------------------------------------------
    def read_TriggerLevel(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerLevel()")))

        #    Add your own code here

        attr_TriggerLevel_read = self.oscilloscope.get_trigger_level()
        attr.set_value(attr_TriggerLevel_read)


# ------------------------------------------------------------------
#    Write TriggerLevel attribute
# ------------------------------------------------------------------
    def write_TriggerLevel(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerLevel()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeTriggerLevel', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- TriggerLevel attribute State Machine -----------------
    def is_TriggerLevel_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read TriggerDelay attribute
# ------------------------------------------------------------------
    def read_TriggerDelay(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerDelay()")))

        #    Add your own code here

        attr_TriggerDelay_read = self.oscilloscope.get_triggerdelay_time()
        attr.set_value(attr_TriggerDelay_read)


# ------------------------------------------------------------------
#    Write TriggerDelay attribute
# ------------------------------------------------------------------
    def write_TriggerDelay(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerDelay()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeTriggerDelay', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- TriggerDelay attribute State Machine -----------------
    def is_TriggerDelay_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read TriggerWait attribute
# ------------------------------------------------------------------
    def read_TriggerWait(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerWait()")))

        #    Add your own code here

        attr_TriggerWait_read = self.redpitaya_data.triggerWait
        attr.set_value(attr_TriggerWait_read)


# ---- TriggerWait attribute State Machine -----------------
    def is_TriggerWait_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read TriggerRate attribute
# ------------------------------------------------------------------
    def read_TriggerRate(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerRate()")))

        #    Add your own code here

        attr_TriggerRate_read = self.oscilloscope.get_trigger_rate()
        attr.set_value(attr_TriggerRate_read)


# ---- TriggerRate attribute State Machine -----------------

    def is_TriggerRate_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read RecordLength attribute
# ------------------------------------------------------------------
    def read_RecordLength(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_RecordLength()")))

        #    Add your own code here

        attr_RecordLength_read = self.oscilloscope.get_record_length()
        self.redpitaya_data.recordLength = attr_RecordLength_read
        attr.set_value(attr_RecordLength_read)


# ------------------------------------------------------------------
#    Write RecordLength attribute
# ------------------------------------------------------------------
    def write_RecordLength(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_RecordLength()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeRecordLength', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- RecordLength attribute State Machine -----------------
    def is_RecordLength_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read SampleRate attribute
# ------------------------------------------------------------------
    def read_SampleRate(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_SampleRate()")))

        #    Add your own code here
        df = self.oscilloscope.get_decimation_factor()
        decDict = {0: 1,
                   1: 8,
                   2: 64,
                   3: 1024,
                   4: 8192,
                   5: 16384}
        # attr_SampleRate_read = 125e6 / decDict[df]
        attr_SampleRate_read = 125e6 / df
        self.redpitaya_data.sampleRate = attr_SampleRate_read
        attr.set_value(attr_SampleRate_read)


# ------------------------------------------------------------------
#    Write SampleRate attribute
# ------------------------------------------------------------------
    def write_SampleRate(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_SampleRate()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeSampleRate', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- SampleRate attribute State Machine -----------------
    def is_SampleRate_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read Temperature attribute
# ------------------------------------------------------------------
    def read_Temperature(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Temperature()")))

        #    Add your own code here

        attr_Temperature_read = self.oscilloscope.get_fpga_temp()
        attr.set_value(attr_Temperature_read)


# ---- Temperature attribute State Machine -----------------
    def is_Temperature_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read TimeVector attribute
# ------------------------------------------------------------------
    def read_TimeVector(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TimeVector()")))

        #    Add your own code here

        attr_TimeVector_read = self.oscilloscope.get_timevector()
        attr.set_value(attr_TimeVector_read, attr_TimeVector_read.shape[0])

# ---- TimeVector attribute State Machine -----------------
    def is_TimeVector_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read Waveform1 attribute
# ------------------------------------------------------------------
    def read_Waveform1(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Waveform1()")))

        #    Add your own code here

        attr_data_read = self.redpitaya_data.waveform1
        attr.set_value(attr_data_read, attr_data_read.shape[0])

# ---- Waveform1 attribute State Machine -----------------
    def is_Waveform1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read Waveform2 attribute
# ------------------------------------------------------------------
    def read_Waveform2(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Waveform2()")))

        #    Add your own code here

        attr_data_read = self.redpitaya_data.waveform2
        attr.set_value(attr_data_read, attr_data_read.shape[0])

# ---- Waveform2 attribute State Machine -----------------
    def is_Waveform2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read MeasurementString1 attribute
# ------------------------------------------------------------------
    def read_MeasurementString1(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementString1()")))

        #    Add your own code here
        attr_MeasurementString1_read = self.measurement_strings[0]
        attr.set_value(attr_MeasurementString1_read)


# ------------------------------------------------------------------
#    Write MeasurementString1 attribute
# ------------------------------------------------------------------
    def write_MeasurementString1(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_MeasurementString1()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeMeasurementString1', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- MeasurementString1 attribute State Machine -----------------
    def is_MeasurementString1_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read MeasurementString2 attribute
# ------------------------------------------------------------------
    def read_MeasurementString2(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementString2()")))

        #    Add your own code here
        attr_MeasurementString2_read = self.measurement_strings[1]
        attr.set_value(attr_MeasurementString2_read)


# ------------------------------------------------------------------
#    Write MeasurementString2 attribute
# ------------------------------------------------------------------
    def write_MeasurementString2(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_MeasurementString2()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeMeasurementString2', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- MeasurementString2 attribute State Machine -----------------
    def is_MeasurementString2_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read MeasurementString3 attribute
# ------------------------------------------------------------------
    def read_MeasurementString3(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementString3()")))

        #    Add your own code here
        attr_MeasurementString3_read = self.measurement_strings[2]
        attr.set_value(attr_MeasurementString3_read)


# ------------------------------------------------------------------
#    Write MeasurementString3 attribute
# ------------------------------------------------------------------
    def write_MeasurementString3(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_MeasurementString3()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeMeasurementString3', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- MeasurementString3 attribute State Machine -----------------
    def is_MeasurementString3_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read MeasurementString4 attribute
# ------------------------------------------------------------------
    def read_MeasurementString4(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementString4()")))

        #    Add your own code here
        attr_MeasurementString4_read = self.measurement_strings[3]
        attr.set_value(attr_MeasurementString4_read)


# ------------------------------------------------------------------
#    Write MeasurementString4 attribute
# ------------------------------------------------------------------
    def write_MeasurementString4(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_MeasurementString4()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.command_queue.put(DeviceCommand('writeMeasurementString4', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

# ---- MeasurementString4 attribute State Machine -----------------
    def is_MeasurementString4_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read MeasurementData1 attribute
# ------------------------------------------------------------------
    def read_MeasurementData1(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementData1()")))

        #    Add your own code here
        attr_MeasurementData1_read = self.measurement_data[0]
        if attr_MeasurementData1_read is None:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        attr.set_value(attr_MeasurementData1_read)

# ---- MeasurementData1 attribute State Machine -----------------
    def is_MeasurementData1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read MeasurementData2 attribute
# ------------------------------------------------------------------
    def read_MeasurementData2(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementData2()")))

        #    Add your own code here
        attr_MeasurementData2_read = self.measurement_data[1]
        attr.set_value(attr_MeasurementData2_read)

# ---- MeasurementData2 attribute State Machine -----------------
    def is_MeasurementData2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read MeasurementData3 attribute
# ------------------------------------------------------------------
    def read_MeasurementData3(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementData3()")))

        #    Add your own code here
        attr_MeasurementData3_read = self.measurement_data[2]
        attr.set_value(attr_MeasurementData3_read)

# ---- MeasurementData3 attribute State Machine -----------------
    def is_MeasurementData3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read MeasurementData4 attribute
# ------------------------------------------------------------------
    def read_MeasurementData4(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementData4()")))

        #    Add your own code here
        attr_MeasurementData4_read = self.measurement_data[3]
        attr.set_value(attr_MeasurementData4_read)

# ---- MeasurementData4 attribute State Machine -----------------
    def is_MeasurementData4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read Marker1x attribute
# ------------------------------------------------------------------
    def read_Marker1x(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Marker1x()")))
        attr_read = self.marker_x_data[0]
        attr.set_value(attr_read)

# ------------------------------------------------------------------
#    Write Marker1x attribute
# ------------------------------------------------------------------
    def write_Marker1x(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_Marker1x()")))
        data = attr.get_write_value()
        self.marker_x_data[0] = data
        self.info_stream(''.join(("Attribute value = ", str(data))))

# ---- Marker1x attribute State Machine -----------------
    def is_Marker1x_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read Marker2x attribute
# ------------------------------------------------------------------
    def read_Marker2x(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Marker2x()")))
        attr_read = self.marker_x_data[1]
        attr.set_value(attr_read)

# ------------------------------------------------------------------
#    Write Marker2x attribute
# ------------------------------------------------------------------

    def write_Marker2x(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_Marker2x()")))
        data = attr.get_write_value()
        self.marker_x_data[1] = data
        self.info_stream(''.join(("Attribute value = ", str(data))))

# ---- Marker2x attribute State Machine -----------------

    def is_Marker2x_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read Marker1y attribute
# ------------------------------------------------------------------
    def read_Marker1y(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Marker1y()")))
        attr_read = self.marker_y_data[0]
        attr.set_value(attr_read)

# ------------------------------------------------------------------
#    Write Marker1y attribute
# ------------------------------------------------------------------
    def write_Marker1y(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_Marker1y()")))
        data = attr.get_write_value()
        self.marker_y_data[0] = data
        self.info_stream(''.join(("Attribute value = ", str(data))))

# ---- Marker1y attribute State Machine -----------------
    def is_Marker1y_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ------------------------------------------------------------------
#    Read Marker2y attribute
# ------------------------------------------------------------------
    def read_Marker2y(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Marker2y()")))
        attr_read = self.marker_y_data[1]
        attr.set_value(attr_read)

# ------------------------------------------------------------------
#    Write Marker2y attribute
# ------------------------------------------------------------------

    def write_Marker2y(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_Marker2y()")))
        data = attr.get_write_value()
        self.marker_y_data[1] = data
        self.info_stream(''.join(("Attribute value = ", str(data))))

# ---- Marker2y attribute State Machine -----------------

    def is_Marker2y_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

# ==================================================================
#
#    RedpitayaEmbeddedDS command methods
#
# ==================================================================

# ------------------------------------------------------------------
#    Start command:
#
#    Description:
# ------------------------------------------------------------------
    def Start(self):
        self.info_stream(''.join(("In ", self.get_name(), "::Start()")))
        #    Add your own code here
        self.command_queue.put(DeviceCommand('start'))

# ------------------------------------------------------------------
#    Stop command:
#
#    Description:
# ------------------------------------------------------------------
    def Stop(self):
        self.info_stream(''.join(("In ", self.get_name(), "::Stop()")))
        #    Add your own code here
        self.command_queue.put(DeviceCommand('stop'))

# ------------------------------------------------------------------
#    Test command:
#
#    Description:
# ------------------------------------------------------------------
    def Test(self):
        self.info_stream(''.join(("In ", self.get_name(), "::Test()")))
        #    Add your own code here
        self.command_queue.put(DeviceCommand('test'))


# ==================================================================
#
#    RedPitayaDSClass class definition
#
# ==================================================================
class RedPitayaDSClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }

    #    Device Properties
    device_property_list = {
        'WatchdogTimeout':
            [PyTango.DevDouble,
             "Timeout for the watchdog resetting the hardware in s",
             [2]],
        'InputRange':
            [PyTango.DevString,
             "Input range setting for the redpitaya. Must be LV or HV",
             ["LV"]],
        'FPGABitFile':
            [PyTango.DevString,
             "Filename for the bit file to load into the FPGA",
             ["/opt/redpitaya/fpga/v0.94/fpga.bit"]],

        }

    #    Command definitions
    cmd_list = {
        'Start':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'Stop':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'Test':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        }

    #    Attribute definitions
    attr_list = {
        'TriggerSource':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Trigger source. One of channel1, channel2, or external",
                'Memorized': "true",
            }],
        'TriggerMode':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Trigger mode. One of auto, normal, or single",
                'Memorized': "true",
            }],
        'TriggerEdge':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
            {
                'description': "Trigger edge. One of positive, or negative",
                'Memorized': "true",
            }],
        'TriggerLevel':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Trigger voltage level.",
                'Memorized': "true",
                'unit': "V",
            }],
        'TriggerDelay':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Delay after detected trigger to acquisition start.",
                'Memorized': "true",
                'unit': "s"
            }],
        'TriggerWait':
            [[PyTango.DevBoolean,
              PyTango.SCALAR,
              PyTango.READ],
             {
                'description': "True if the scope is waiting for a trigger signal",
            }],
        'TriggerRate':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ],
             {
                 'description': "Number of trigger events per second",
             }],
        'RecordLength':
            [[PyTango.DevLong,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Number of samples in the waveform.",
                'Memorized': "true",
            }],
        'SampleRate':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Samples per second. Values will be snapped to the next higher factor in 125e6/n (n=1, 8, 64, 1024, 8192, 16384). That is 125, 15.6, 1.95, 0.122, 0.0152, or 0.00762 MSps",
                'Memorized': "true",
                'unit': "S/s"
            }],
        'Temperature':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ],
             {
                'description': "FPGA board temperature.",
                'Memorized': "false",
                'unit': "degC",
            }],

        'TimeVector':
            [[PyTango.DevDouble,
              PyTango.SPECTRUM,
              PyTango.READ, 16384],
             {
                'unit': "s",
            }],
        'Waveform1':
            [[PyTango.DevDouble,
              PyTango.SPECTRUM,
              PyTango.READ, 16384],
             {
                'unit': "V",
            }],
        'Waveform2':
            [[PyTango.DevDouble,
              PyTango.SPECTRUM,
              PyTango.READ, 16384],
             {
                'unit': "V",
            }],
        'MeasurementString1':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Line to evaluate to produce measurement",
                'Memorized': "true",
            }],
        'MeasurementString2':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Line to evaluate to produce measurement",
                'Memorized': "true",
            }],
        'MeasurementString3':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Line to evaluate to produce measurement",
                'Memorized': "true",
            }],
        'MeasurementString4':
            [[PyTango.DevString,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                'description': "Line to evaluate to produce measurement",
                'Memorized': "true",
            }],
        'MeasurementData1':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ],
             {
                'description': "Result of measurement",
            }],
        'MeasurementData2':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ],
             {
                'description': "Result of measurement",
            }],
        'MeasurementData3':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ],
             {
                'description': "Result of measurement",
            }],
        'MeasurementData4':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ],
             {
                'description': "Result of measurement",
            }],
        'Marker1x':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'description': "Marker 1 x position",
                 'Memorized': "true",
                 'unit': "s",
             }],
        'Marker1y':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'description': "Marker 1 y position",
                 'Memorized': "true",
                 'unit': "V",
             }],
        'Marker2x':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'description': "Marker 2 x position",
                 'Memorized': "true",
                 'unit': "s",
             }],
        'Marker2y':
            [[PyTango.DevDouble,
              PyTango.SCALAR,
              PyTango.READ_WRITE],
             {
                 'description': "Marker 2 y position",
                 'Memorized': "true",
                 'unit': "V",
             }],


        }

    # ------------------------------------------------------------------
    #    RedPitayaDSClass Constructor
    # ------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name)
        print("In RedPitayaDSClass  constructor")

    # ==================================================================
    #
    #    RedpitayaEmbeddedDS class main method
    #
    # ==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(RedPitayaDSClass, RedpitayaEmbeddedDS, 'RedpitayaEmbeddedDS')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print("-------> Received a DevFailed exception: {0}".format(e))
    except Exception as e:
        print("-------> An unforeseen exception occured.... {0}".format(e))
